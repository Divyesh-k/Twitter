




// import React from "react";
// import { Link } from "react-router-dom";

// const data = {
//   profileImg: "/avatars/boy1.png",
// };

// const ChatPage = () => {
//   return (
//     <div className="flex flex-col md:flex-row h-screen w-full max-w-6xl mx-auto">
//       {/* Sidebar */}
//       <div className="bg-muted/20 p-4 border-r w-full md:w-64 md:min-w-[250px] overflow-y-auto">
//         <div className="flex items-center justify-between mb-4">
//           <h2 className="text-lg font-medium">Chats</h2>
//           <button className="rounded-full p-2 hover:bg-muted/50">
//             <PlusIcon className="h-5 w-5" />
//             <span className="sr-only">New Chat</span>
//           </button>
//         </div>
//         <div className="space-y-2">
//           {/* Chat list items */}
//           <ChatListItem
//             name="Acme Inc"
//             message="Hey, how's it going?"
//             time="2h"
//             active={true}
//           />
//           <ChatListItem
//             name="Jared Palmer"
//             message="Sounds good, let's do it!"
//             time="1d"
//           />
//           <ChatListItem
//             name="Maria Gonzalez"
//             message="Can't wait for the weekend!"
//             time="3d"
//           />
//           <ChatListItem
//             name="Alex Johnson"
//             message="Did you see the latest update?"
//             time="4d"
//           />
//           <ChatListItem
//             name="Sarah Lee"
//             message="Thanks for your help yesterday!"
//             time="1w"
//           />
//         </div>
//       </div>

//       {/* Main chat area */}
//       <div className="flex-1 flex flex-col h-full">
//         {/* Chat header */}
//         <div className="border-b p-4 flex items-center gap-4">
//           <div className="avatar">
//             <div className="w-8 h-8 rounded-full">
//               <img
//                 src={data.profileImg || "/avatar-placeholder.png"}
//                 alt="Profile"
//                 className="w-full h-full object-cover"
//               />
//             </div>
//           </div>
//           <div className="flex-1 min-w-0">
//             <p className="font-medium text-primary truncate">Acme Inc</p>
//             <p className="text-sm text-muted-foreground">Active 2h ago</p>
//           </div>
//           <div className="flex items-center gap-2">
//             <button className="p-2 bg-primary text-primary-foreground hover:bg-primary/90 rounded-full">
//               <PhoneIcon className="h-5 w-5" />
//               <span className="sr-only">Call</span>
//             </button>
//             <button className="p-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 rounded-full">
//               <VideoIcon className="h-5 w-5" />
//               <span className="sr-only">Video call</span>
//             </button>
//           </div>
//         </div>

//         {/* Chat messages */}
//         <div className="flex-1 overflow-y-auto p-4 space-y-4">
//           <div className="flex w-full max-w-[80%] sm:max-w-[65%] flex-col gap-2 rounded-2xl rounded-tr-sm px-4 py-2 text-sm ml-auto bg-primary text-primary-foreground">
//             Hey, how's it going?
//           </div>
//           <div className="flex w-full max-w-[80%] sm:max-w-[65%] flex-col gap-2 rounded-2xl rounded-tl-sm px-4 py-2 text-sm bg-muted text-muted-foreground">
//             Pretty good, just working on some stuff. How about you?
//           </div>
//           <div className="flex w-full max-w-[80%] sm:max-w-[65%] flex-col gap-2 rounded-2xl rounded-tr-sm px-4 py-2 text-sm ml-auto bg-primary text-primary-foreground">
//             Same here, just trying to get some things done before the weekend.
//           </div>
//           <div className="flex w-full max-w-[80%] sm:max-w-[65%] flex-col gap-2 rounded-2xl rounded-tl-sm px-4 py-2 text-sm bg-muted text-muted-foreground">
//             Sounds good. Let me know if you want to grab coffee or something
//             this weekend.
//           </div>
//         </div>

//         {/* Message input */}
//         <div className="border-t p-4">
//           <form className="flex items-center gap-2">
//             <input
//               id="message"
//               placeholder="Type your message..."
//               className="flex-1 bg-muted text-muted-foreground focus:bg-muted/80 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 focus:ring-offset-background rounded-full py-2 px-4"
//               autoComplete="off"
//             />
//             <button
//               type="submit"
//               className="p-2 bg-primary text-primary-foreground hover:bg-primary/90 rounded-full"
//             >
//               <SendIcon className="h-5 w-5" />
//               <span className="sr-only">Send</span>
//             </button>
//           </form>
//         </div>
//       </div>
//     </div>
//   );
// };

// // ChatListItem component for reusability
// const ChatListItem = ({ name, message, time, active = false }) => (
//   <Link
//     to="#"
//     className={`flex items-center gap-3 p-2 rounded-lg hover:bg-muted/50 ${
//       active ? "bg-muted/30" : ""
//     }`}
//   >
//     <div className="avatar">
//       <div className="w-8 h-8 rounded-full">
//         <img
//           src={data.profileImg || "/avatar-placeholder.png"}
//           alt={name}
//           className="w-full h-full object-cover"
//         />
//       </div>
//     </div>
//     <div className="flex-1 min-w-0">
//       <p
//         className={`font-medium truncate ${
//           active ? "text-primary" : "text-muted-foreground"
//         }`}
//       >
//         {name}
//       </p>
//       <p className="text-sm text-muted-foreground truncate">{message}</p>
//     </div>
//     <div className="text-xs text-muted-foreground">{time}</div>
//   </Link>
// );

// export default ChatPage;

// function PhoneIcon(props) {
//   return (
//     <svg
//       {...props}
//       xmlns="http://www.w3.org/2000/svg"
//       width="24"
//       height="24"
//       viewBox="0 0 24 24"
//       fill="none"
//       stroke="currentColor"
//       strokeWidth="2"
//       strokeLinecap="round"
//       strokeLinejoin="round"
//     >
//       <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z" />
//     </svg>
//   );
// }

// function PlusIcon(props) {
//   return (
//     <svg
//       {...props}
//       xmlns="http://www.w3.org/2000/svg"
//       width="24"
//       height="24"
//       viewBox="0 0 24 24"
//       fill="none"
//       stroke="currentColor"
//       strokeWidth="2"
//       strokeLinecap="round"
//       strokeLinejoin="round"
//     >
//       <path d="M5 12h14" />
//       <path d="M12 5v14" />
//     </svg>
//   );
// }

// function SendIcon(props) {
//   return (
//     <svg
//       {...props}
//       xmlns="http://www.w3.org/2000/svg"
//       width="24"
//       height="24"
//       viewBox="0 0 24 24"
//       fill="none"
//       stroke="currentColor"
//       strokeWidth="2"
//       strokeLinecap="round"
//       strokeLinejoin="round"
//     >
//       <path d="m22 2-7 20-4-9-9-4Z" />
//       <path d="M22 2 11 13" />
//     </svg>
//   );
// }

// function VideoIcon(props) {
//   return (
//     <svg
//       {...props}
//       xmlns="http://www.w3.org/2000/svg"
//       width="24"
//       height="24"
//       viewBox="0 0 24 24"
//       fill="none"
//       stroke="currentColor"
//       strokeWidth="2"
//       strokeLinecap="round"
//       strokeLinejoin="round"
//     >
//       <path d="m16 13 5.223 3.482a.5.5 0 0 0 .777-.416V7.87a.5.5 0 0 0-.752-.432L16 10.5" />
//       <rect x="2" y="6" width="14" height="12" rx="2" />
//     </svg>
//   );
// }








// ----------------------------------------------------------------------------------------
working code
// ----------------------------------------------------------------------------------------

import React, { useEffect, useState } from 'react';
import io from 'socket.io-client';

const socket = io("http://localhost:5000", {
  transports : ['websocket' , 'polling']
}); // Adjust according to your server URL

const ChatPage = () => {
  const [users, setUsers] = useState([]);
  const [selectedChat, setSelectedChat] = useState(null);
  const [messages, setMessages] = useState([]);
  const [message, setMessage] = useState('');

  useEffect(() => {
    // Fetch users
    fetch("/api/users/allusers")
      .then(response => response.json())
      .then(data => setUsers(data))
      .catch(error => console.error("Error fetching users:", error));
  }, []);

  useEffect(() => {
    if (selectedChat) {
      socket.emit('joinChat', selectedChat._id); // Ensure chatId matches your schema

      socket.on('receiveMessage', (newMessage) => {
        setMessages((prevMessages) => [...prevMessages, newMessage]);
      });

      return () => {
        socket.off('receiveMessage');
      };
    }
  }, [selectedChat]);

  const handleChatSelection = (user) => {
    setSelectedChat(user);
    // Fetch messages for the selected chat if needed
    fetch(`/api/chat/${user._id}`)
      .then(response => response.json())
      .then(data => setMessages(data.messages))
      .catch(error => console.error("Error fetching messages:", error));
  };

  const handleSendMessage = (e) => {
    e.preventDefault();
    if (message.trim() && selectedChat) {
      const newMessage = { sender: 'your-user-id', content: message }; // Adjust user ID
      socket.emit('sendMessage', { chatId: selectedChat._id, message: newMessage });
      setMessage('');
    }
  };

  return (
    <div className="flex flex-col md:flex-row h-screen w-full max-w-6xl mx-auto">
      {/* Sidebar */}
      <div className="bg-muted/20 p-4 border-r w-full md:w-64 md:min-w-[250px] overflow-y-auto">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-medium">Chats</h2>
          <button className="rounded-full p-2 hover:bg-muted/50">
            <PlusIcon className="h-5 w-5" />
            <span className="sr-only">New Chat</span>
          </button>
        </div>
        <div className="space-y-2">
          {users.map((user) => (
            <ChatListItem
              key={user._id}
              user={user}
              active={selectedChat?._id === user._id}
              onClick={() => handleChatSelection(user)}
            />
          ))}
        </div>
      </div>

      {/* Main chat area */}
      <div className="flex-1 flex flex-col h-full">
        {selectedChat ? (
          <>
            {/* Chat header */}
            <div className="border-b p-4 flex items-center gap-4">
              <div className="avatar">
                <div className="w-8 h-8 rounded-full">
                  <img
                    src={selectedChat.profileImg || "/avatar-placeholder.png"}
                    alt="Profile"
                    className="w-full h-full object-cover"
                  />
                </div>
              </div>
              <div className="flex-1 min-w-0">
                <p className="font-medium text-primary truncate">
                  {selectedChat.username}
                </p>
                <p className="text-sm text-muted-foreground">
                  Active {selectedChat.lastActive} ago
                </p>
              </div>
              <div className="flex items-center gap-2">
                <button className="p-2 bg-primary text-primary-foreground hover:bg-primary/90 rounded-full">
                  <PhoneIcon className="h-5 w-5" />
                  <span className="sr-only">Call</span>
                </button>
                <button className="p-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 rounded-full">
                  <VideoIcon className="h-5 w-5" />
                  <span className="sr-only">Video call</span>
                </button>
              </div>
            </div>

               {/* Chat messages */}
               <div className="flex-1 overflow-y-auto p-4 space-y-4">
              {messages.length > 0 ? (
                messages.map((msg, index) => (
                  <div key={index} className={`chat ${msg.sender === 'your-user-id' ? 'chat-end' : 'chat-start'}`}>
                    <div className="chat-image avatar">
                      <div className="w-10 rounded-full">
                        <img
                          alt="Chat bubble"
                          src={msg.sender === 'your-user-id' ? "/your-profile-image-url.png" : selectedChat.profileImg || "/avatar-placeholder.png"}
                        />
                      </div>
                    </div>
                    <div className="chat-header">
                      {msg.sender === 'your-user-id' ? 'You' : selectedChat.username}
                      <time className="text-xs opacity-50">{new Date().toLocaleTimeString()}</time>
                    </div>
                    <div className="chat-bubble">{msg.content}</div>
                    <div className="chat-footer opacity-50">Delivered</div>
                  </div>
                ))
              ) : (
                <p className="text-center text-muted-foreground">No messages yet</p>
              )}
            </div>

            {/* Message input */}
            <div className="border-t p-4">
              <form onSubmit={handleSendMessage} className="flex items-center gap-2">
                <input
                  id="message"
                  placeholder="Type your message..."
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  className="flex-1 bg-muted text-muted-foreground focus:bg-muted/80 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 focus:ring-offset-background rounded-full py-2 px-4"
                  autoComplete="off"
                />
                <button
                  type="submit"
                  className="p-2 bg-primary text-primary-foreground hover:bg-primary/90 rounded-full"
                >
                  <SendIcon className="h-5 w-5" />
                  <span className="sr-only">Send</span>
                </button>
              </form>
            </div>
          </>
        ) : (
          <div className="flex items-center justify-center h-full">
            <p className="text-lg text-muted-foreground">Select a chat to start messaging</p>
          </div>
        )}
      </div>
    </div>
  );
};



// Updated function to display user profiles and names in the sidebar
function ChatListItem({ user, active, onClick }) {
  return (
    <div
      onClick={onClick}
      className={`flex items-center gap-3 p-2 cursor-pointer rounded-lg ${
        active ? "bg-stone-700 text-white" : "hover:bg-purple-800   duration-300"
      }`}
    >
      <div className="avatar">
        <div className="w-8 h-8 rounded-full">
          <img
            src={user.profileImg || "/avatar-placeholder.png"}
            alt={user.username}
            className="w-full h-full object-cover"
          />
        </div>
      </div>
      <div className="flex-1 min-w-0">
        <p className={`font-medium truncate ${active ? "text-white" : "text-lime-700"}`}>
          {user.username}
        </p>
      </div>
    </div>
  );
}


export default ChatPage;


function PhoneIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z" />
    </svg>
  );
}

function PlusIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  );
}

function SendIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m22 2-7 20-4-9-9-4Z" />
      <path d="M22 2 11 13" />
    </svg>
  );
}

function VideoIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="23 7 16 12 23 17 23 7" />
      <rect x="1" y="5" width="15" height="14" rx="2" ry="2" />
    </svg>
  );
}









//  -----------------------------
2nd working code
//---------------------------------

import React, { useEffect, useState } from 'react';
import io from 'socket.io-client';

const socket = io("http://localhost:5000", {
  transports: ['websocket', 'polling']
}); // Adjust according to your server URL

const ChatPage = () => {
  const [users, setUsers] = useState([]);
  const [selectedChat, setSelectedChat] = useState(null);
  const [messages, setMessages] = useState([]);
  const [message, setMessage] = useState('');

  useEffect(() => {
    // Fetch users
    fetch("/api/users/allusers")
      .then(response => response.json())
      .then(data => setUsers(data))
      .catch(error => console.error("Error fetching users:", error));
  }, []);

  useEffect(() => {
    if (selectedChat) {
      socket.emit('joinChat', selectedChat._id); // Ensure chatId matches your schema

      socket.on('receiveMessage', (newMessage) => {
        setMessages((prevMessages) => [...prevMessages, newMessage]);
      });

      return () => {
        socket.off('receiveMessage');
      };
    }
  }, [selectedChat]);

  const handleChatSelection = (user) => {
    setSelectedChat(user);
    // Fetch messages for the selected chat if needed
    fetch(`/api/chat/${user._id}`)
      .then(response => response.json())
      .then(data => setMessages(data.messages || [])) // Ensure messages is always an array
      .catch(error => console.error("Error fetching messages:", error));
  };

  const handleSendMessage = (e) => {
    e.preventDefault();
    if (message.trim() && selectedChat) {
      const newMessage = { sender: 'your-user-id', content: message }; // Adjust user ID
      socket.emit('sendMessage', { chatId: selectedChat._id, message: newMessage });
      setMessage('');
    }
  };

  return (
    <div className="flex flex-col md:flex-row h-screen w-full max-w-6xl mx-auto">
      {/* Sidebar left side chat members */}
      <div className="bg-muted/20 p-4 border-r w-full md:w-64 md:min-w-[250px] overflow-y-auto">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-medium">Chats</h2>
          <button className="rounded-full p-2 hover:bg-muted/50">
            <PlusIcon className="h-5 w-5" />
            <span className="sr-only">New Chat</span>
          </button>
        </div>
        <div className="space-y-2">
          {users.map((user) => (
            <ChatListItem
              key={user._id}
              user={user}
              active={selectedChat?._id === user._id}
              onClick={() => handleChatSelection(user)}
            />
          ))}
        </div>
      </div>

      {/* Main chat area right side chat area */}
      <div className="flex-1 flex flex-col h-full">
        {selectedChat ? (
          <>
            {/* Chat header */}
            <div className="border-b p-4 flex items-center gap-4">
              <div className="avatar">
                <div className="w-8 h-8 rounded-full">
                  <img
                    src={selectedChat.profileImg || "/avatar-placeholder.png"}
                    alt="Profile"
                    className="w-full h-full object-cover"
                  />
                </div>
              </div>
              <div className="flex-1 min-w-0">
                <p className="font-medium text-primary truncate">
                  {selectedChat.username}
                </p>
                <p className="text-sm text-muted-foreground">
                  Active {selectedChat.lastActive} ago
                </p>
              </div>
              <div className="flex items-center gap-2">
                <button className="p-2 bg-primary text-primary-foreground hover:bg-primary/90 rounded-full">
                  <PhoneIcon className="h-5 w-5" />
                  <span className="sr-only">Call</span>
                </button>
                <button className="p-2 bg-secondary text-secondary-foreground hover:bg-secondary/90 rounded-full">
                  <VideoIcon className="h-5 w-5" />
                  <span className="sr-only">Video call</span>
                </button>
              </div>
            </div>

            {/* Chat messages */}
            <div className="flex-1 overflow-y-auto p-4 space-y-4">
              {messages.length > 0 ? (
                messages.map((msg, index) => (
                  <div key={index} className={`chat ${msg.sender === 'your-user-id' ? 'chat-end' : 'chat-start'}`}>
                    <div className="chat-image avatar">
                      <div className="w-10 rounded-full">
                        <img
                          alt="Chat bubble"
                          src={msg.sender === 'your-user-id' ? "/your-profile-image-url.png" : selectedChat.profileImg || "/avatar-placeholder.png"}
                        />
                      </div>
                    </div>
                    <div className="chat-header">
                      {msg.sender === 'your-user-id' ? 'You' : selectedChat.username}
                      <time className="text-xs opacity-50">{new Date().toLocaleTimeString()}</time>
                    </div>
                    <div className="chat-bubble">{msg.content}</div>
                    <div className="chat-footer opacity-50">Delivered</div>
                  </div>
                ))
              ) : (
                <p className="text-center text-muted-foreground">No messages yet</p>
              )}
            </div>

            {/* Message input */}
            <div className="border-t p-4">
              <form onSubmit={handleSendMessage} className="flex items-center gap-2">
                <input
                  id="message"
                  placeholder="Type your message..."
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  className="flex-1 bg-muted text-muted-foreground focus:bg-muted/80 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 focus:ring-offset-background rounded-full py-2 px-4"
                  autoComplete="off"
                />
                <button
                  type="submit"
                  className="p-2 bg-primary text-primary-foreground hover:bg-primary/90 rounded-full"
                >
                  <SendIcon className="h-5 w-5" />
                  <span className="sr-only">Send</span>
                </button>
              </form>
            </div>
          </>
        ) : (
          <div className="flex items-center justify-center h-full">
            <p className="text-lg text-muted-foreground">Select a chat to start messaging</p>
          </div>
        )}
      </div>
    </div>
  );
};

function ChatListItem({ user, active, onClick }) {
  return (
    <div
      onClick={onClick}
      className={`flex items-center gap-3 p-2 cursor-pointer rounded-lg ${
        active ? "bg-stone-700 text-white" : "hover:bg-purple-800   duration-300"
      }`}
    >
      <div className="avatar">
        <div className="w-8 h-8 rounded-full">
          <img
            src={user.profileImg || "/avatar-placeholder.png"}
            alt={user.username}
            className="w-full h-full object-cover"
          />
        </div>
      </div>
      <div className="flex-1 min-w-0">
        <p className={`font-medium truncate ${active ? "text-white" : "text-lime-700"}`}>
          {user.username}
        </p>
      </div>
    </div>
  );
}

export default ChatPage;



function PhoneIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z" />
    </svg>
  );
}

function PlusIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  );
}

function SendIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m22 2-7 20-4-9-9-4Z" />
      <path d="M22 2 11 13" />
    </svg>
  );
}

function VideoIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="23 7 16 12 23 17 23 7" />
      <rect x="1" y="5" width="15" height="14" rx="2" ry="2" />
    </svg>
  );
}
